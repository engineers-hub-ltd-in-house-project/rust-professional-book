fn main() {
    println!("--- アフィン型のデモ (ムーブセマンティクス) ---");
    // Stringはヒープにデータを確保するため、Copyトレイトを実装していない。
    // そのため、代入はムーブとして扱われる。
    let s1 = String::from("hello");
    println!("s1 を作成しました。");

    // s1の所有権がs2にムーブする。
    // アフィン型の考え方では、`s1`という値はここで「一度使われた」ことになる。
    let s2 = s1;
    println!("s1 の所有権を s2 にムーブしました。");

    // `s1`はもはや無効であり、二度と使えない。
    // 以下の行のコメントを外すとコンパイルエラーになる。
    // error[E0382]: borrow of moved value: `s1`
    // println!("再度s1を使おうとすると...: {}", s1);

    println!("s2 は利用可能です: {}", s2);


    println!("\n--- Copy型のデモ ---");
    // i32はスタック上にデータが完全に収まるため、Copyトレイトを実装している。
    // そのため、代入はコピーとして扱われる。
    let x = 5;
    println!("x を作成しました。値: {}", x);

    let y = x;
    println!("x の値を y にコピーしました。");

    // `x`はムーブされておらず、まだ有効。
    println!("x はまだ有効です: {}", x);
    println!("y も有効です: {}", y);
}
