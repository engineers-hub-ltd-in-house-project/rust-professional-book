use nom::{    bytes::complete::{tag, take_while},    character::complete::{alpha1, alphanumeric1, line_ending, multispace0},    combinator::{map, opt, recognize},    multi::many0,    sequence::{delimited, separated_pair, terminated},    IResult,};use std::collections::HashMap;// キーとして有効な文字列（例: "API_KEY", "PORT"）を認識するパーサー// キーは英字で始まり、英数字またはアンダースコアが続くfn parse_key(input: &str) -> IResult<&str, &str> {    recognize(nom::sequence::pair(        alpha1,        many0(nom::branch::alt((alphanumeric1, tag("_")))),    ))(input);}// 行末までの全てを値として取得するパーサーfn parse_value(input: &str) -> IResult<&str, &str> {    take_while(|c| c != '
' && c != '')(input);}// `KEY=VALUE` のペアをパースするfn parse_pair(input: &str) -> IResult<&str, (&str, &str)> {    separated_pair(        parse_key,        delimited(multispace0, tag("="), multispace0),        parse_value,    )(input);}// `#`で始まるコメント行をパースするfn parse_comment(input: &str) -> IResult<&str, ()> {    map(nom::sequence::pair(tag("#"), take_while(|c| c != '
' && c != '')), |_| ())(input);}// 意味のある行（キーバリューペア）か、無視する行（コメント、空行）かをパースするfn parse_line(input: &str) -> IResult<&str, Option<(&str, &str)>> {    nom::branch::alt((        map(parse_pair, Some),        map(parse_comment, |_| None),        map(multispace0, |_| None), // 空行や空白のみの行    ))(input);}/// .env形式のファイル内容全体をパースし、HashMapを返す/// キーと値は元の入力文字列へのスライス（ゼロコピー）pub fn parse_env(input: &str) -> IResult<&str, HashMap<&str, &str>> {    // 多くの行をパースし、各行は改行で終わる（最後の行は改行がなくても良い）    let (input, lines) = many0(terminated(parse_line, opt(line_ending)))(input)?;    // `None`（コメントや空行）を除外し、HashMapに収集する    let map = lines.into_iter().filter_map(|opt| opt).collect();    Ok((input, map));}#[cfg(test)]mod tests {    use super::*;    #[test]    fn test_parse_env_file() {        let input = r#"# This is a commentPORT=8080DATABASE_URL = postgres://user:pass@host/dbAPI_KEY=my_secret_key        "#;        let (remaining, map) = parse_env(input).unwrap();        // パーサーは全ての入力を消費すべき        assert!(remaining.trim().is_empty());        assert_eq!(map.get("PORT"), Some(&"8080"));        assert_eq!(map.get("DATABASE_URL"), Some(&"postgres://user:pass@host/db"));        assert_eq!(map.get("API_KEY"), Some(&"my_secret_key"));        assert_eq!(map.len(), 3);    }}